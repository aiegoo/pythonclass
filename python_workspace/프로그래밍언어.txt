 프로그래밍언어 
 1세대 - 기계어, 어셈블리어  
         동굴,  움집 
         4 + 5  4bit

         0001 0100 0101  -> 145 
         
         add 4 5 
         1.키보드로부터 4를 읽는다 
         (30~40)-> 주기억장치 
         연산장치로 이동 
         load ax, 4  -> 번역 (어셈블러)
         load bx, 5
         add 
           
 2세대 : 자연어(고급언어) - 초가집 
        fortran(계산용), cobol(자료처리용) 
        컴파일러(자연어 -> 기계어로)

 3세대 : 구조적프로그래밍 언어- 양옥집 , 배관, 전기, 하수도...
         설계도 만들자,  C언어 
         모듈단위(함수, 프로시저)
         goto 문 - 이걸 없애자 

 4세대 : 객체지향프로그래밍- 63빌딩 
        미리 많이 부품을 만들어서 부품을 이어서 프로그램으로 
        만들자


 자료구조 - 알고리즘 
 3세대, 생산성을 늘려보자, 과정과 절차(알고리즘), 
 데이터측면-자료구조 

 1,2세대 - 결과중심주의
 3세대 - 과정(절차) 중심주의 
 4세대 - 결과중심주의(객체)

 선형구조 - 배열, 리스트, 스택, 큐, 데큐....
 비선형구조 - 트리, 그래프 
             루트가 있고 그것으로 부터 파생되어서 
             노드가 만들어진다. 부모자식개념 
             탐색기에 보는 디렉토리 구조, 조직도
             html, xml 
             그래프 - 네트워크망, 트리의 차일드 노드에서
            루트까지 갈 수 있으면, 그래프 구조가 된다 

배열 - 프로그램 시작전에 메모리가 연속된 공간에 확보
      힙공간에 자리 잡지 않는다 
      프로그램 수행 도중에 크기 변경 불가 
      고정된 위치에 고정된크기를 차지해야 한다 
      데이터를 중간에 끼워넣거나 중간에 삭제하거나 힘들어 
     
스택 - 시스템이 관리 
힙  - 개발자가 관리 
스택  
int a;                     int *p=new int()

a 
p  ------------------------> int()

연결리스트 - 미리 필요한 메모리 확보 없이 데이터 들어오면 
필요한 위치 잡고 데이터저장하고 다음번 데이터의 위치값을 
저장한다 

class Node:
    data
    next - 다음번 요소에 대한 주소값을 저장한다 
    
배열 - 시작과 끝이 어딘지 안다. 
리스트는 시작과 끝에 대한 정보를 별도로 유지해야 한다 

class MyList:
    head - 리스트의 시작
    tail - 리스트의 끝

단일연결리스트는 다음번요소, 순서대로 조회, 역순조회 힘들다 
이중링크드리스트 내앞의요소 내다음요소 순서조회, 역순조회도가능하다


스택 - 먼저 들어간 데이터가 나중에 나오는 구조 
       함수
       깊이우선탐색, 미로찾기 
       트리순회(infix, prefix, postfix)
       인터럽트 ...
       재귀호출 
       Last In First Out(LIFO)-후입선출 

main                functionA            functionB 


call functionA()    call functionB()      
A'                  B'


B'  push B  
A'  push A' 

push - 스택에 데이터 넣기, 
pop - 스택으로 부터 데이터 하나 제거
underflow  - 스택이 비었는데 스택에서 자꾸 뭐 제거하라고 하면 
             이상황을 언더플로우
overflow - 스택도 크기제한이 있어서 스택의 크기를 벗어날때 
            오버플로우 상황
isEmpty- 스택이 비었으면 True 아니면 False 
isFull  -스택이 꽉차면 True, 아니면 False 

큐(Queue)- 선입선출 
          First In First Out(FIFO)
          버퍼, 메시지큐, 은행서 줄서는 구조 















          



