재귀호출 - 자기가 자신을 호출하는 함수
               코드가 단순해보인다. 
               트리순회(infix, postfix, prefix방식등) 
               함수를 많이 호출한다. 메모리랑 자원을 많이 사용한다.
               속도는 느리다 

              내가 나를 계속 호출하기 때문에 냅두면 시스템자원
              을 다쓰도록 호출된다. 어느시점에 호출을 그만둬야할지를
              정확하게 기술해줘야 된다. 
강제 재귀호출상항
             A  -> B 
             B  -> A
            1~ n까지의 합계를 구하는걸 재귀호출로 만든다면 
            f(n)= n + f(n-1)
                        --------
                          n-1 + f(n-2)
                          n이 1이될때 끝내자 
                          n+ f(n-1)함수를 다시 호출하자 

이터레이터 : 어떤 요소를 실제 내부 메모리 구조와 상관없이 동일한 방법으로 차례대로 
                  접근할 수 있도록 하는 객체 
                  list, tuple, dict, string 모두 데이터를 저장하는 방식이나 구조는 서로 
                 많이 다르다. 개발자가 이걸 하나씩 파악해서 별도 처리를 하려면 
                복잡하니까 파이썬에서 개발자들로 하여금 동일한 방식으로 요소들을
                접근할 수 있도록 이터레이터 객체를 지원한다. 이터레이터가 지원되면 
                for 아이템 in 객체리스트: 형태로 접근이 가능하다 
 
  score>=90 and score<=100
  90<= score <=100

  and 단축평가  &

  A and B 
  0       0    0
  0       1    0
  1       0    0
  1       1    1

   표현식    for item in 리스트       (if조건식)

연습문제

list, string, dict 클래스 

추상성 -내부 구조를 구체적으로 모르는데 사용이 가능한 성격 
           추상화가 극대화 되면 사용이 더 편하다 
           자동차 -> 예를들어 엔진의 기본구조와, 웬만한 고장수리까지 가능해야 
                         운전면허증을준다고 하면, 사람들이 운전면허따기 너무 어려움
                    -> 차 내부 구조 몰라도 운전에 지장사항은 없다. 이런걸 추상성이라고 
                        한다.
          결론 : 추상화 - 사용자 관점, 만드는 사람은 더 어려워졌다 

은닉성 : 데이터를 감추는 성격(파이썬은 안감춤) 
           변수에 __(밑줄문자 2개를 연달아) 변수명 - 외부에서 접근 불가 

상속성 : 부모클래스의 속성들을 상속받아 사용할 수 있다
            
다형성 : 이름이 같은데 모양이 다르다. 
           print(a)
           print(a, b)
           오버로딩 - 이름이 같은 함수를 여러개(파이썬 X) 
           기본인자 - 매개변수에 기본값을 줘서 오버로딩과 비슷한 효과를 가져온다
           오버라이딩 - 부모클래스로부터 함수를 상속받아 고쳐서 쓴다 

클래스 설계하기 - 데이터 처리시 
     데이터부분만 - 클래스 만들고 
     데이터처리부분 - 클래스로 보통 나누어서 처리한다. 
     WeekPayData - 데이터만
     WeekPayMgr  -보통  Data클래스의 리스트만 하나 추가한다 
                         추가, 수정, 삭제등의 일을 담당한다 

     주소록 관리프로그램 - 이름, 전화번호, 이메일 






 









                 



